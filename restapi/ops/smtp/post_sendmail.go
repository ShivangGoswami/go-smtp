// Code generated by go-swagger; DO NOT EDIT.

package smtp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostSendmailHandlerFunc turns a function with the right signature into a post sendmail handler
type PostSendmailHandlerFunc func(PostSendmailParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PostSendmailHandlerFunc) Handle(params PostSendmailParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PostSendmailHandler interface for that can handle valid post sendmail params
type PostSendmailHandler interface {
	Handle(PostSendmailParams, interface{}) middleware.Responder
}

// NewPostSendmail creates a new http.Handler for the post sendmail operation
func NewPostSendmail(ctx *middleware.Context, handler PostSendmailHandler) *PostSendmail {
	return &PostSendmail{Context: ctx, Handler: handler}
}

/*PostSendmail swagger:route POST /sendmail Smtp postSendmail

send e-mail

send email rest api

*/
type PostSendmail struct {
	Context *middleware.Context
	Handler PostSendmailHandler
}

func (o *PostSendmail) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostSendmailParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
